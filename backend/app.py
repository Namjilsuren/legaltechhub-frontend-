from flask import Flask, jsonify, request
from flask_cors import CORS
from sqlalchemy import text
from models import SessionLocal, Message

# ===============================
# ‚öôÔ∏è Flask App Setup
# ===============================
app = Flask(__name__)
CORS(app)  # frontend (port 5500) ‚Üî backend (port 5001) —Ö–æ–ª–±–æ–ª—Ç

# ===============================
# üí¨ 1. Messages API (—Ö—É—É–ª—å—á–¥—ã–Ω —á–∞—Ç)
# ===============================
@app.route("/api/messages", methods=["GET", "POST"])
def handle_messages():
    db = SessionLocal()

    # üì® POST —Ö“Ø—Å—ç–ª—Ç (—à–∏–Ω—ç –º–µ—Å—Å–µ–∂ –∏–ª–≥—ç—ç—Ö)
    if request.method == "POST":
        data = request.get_json() or {}
        sender = (data.get("sender") or "Guest").strip()
        content = (data.get("content") or "").strip()
        room = (data.get("room") or "general").strip().lower()

        # –•–æ–æ—Å–æ–Ω –º–µ—Å—Å–µ–∂ —à–∞–ª–≥–∞—Ö
        if not content:
            db.close()
            return jsonify({"error": "Empty message"}), 400

        # –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –º–µ—Å—Å–µ–∂ —Ö–∞–¥–≥–∞–ª–∞—Ö
        db.add(Message(sender=sender, content=content, room=room))
        db.commit()

        # ü§ñ Bot —Ö–∞—Ä–∏—É
        bot_reply = generate_bot_reply(content)
        if bot_reply:
            db.add(Message(sender="bot", content=bot_reply, room=room))
            db.commit()

        db.close()
        return jsonify({"status": "ok"}), 201

    # üí¨ GET —Ö“Ø—Å—ç–ª—Ç (”©—Ä”©”©–Ω–∏–π –º–µ—Å—Å–µ–∂“Ø“Ø–¥–∏–π–≥ –∞–≤–∞—Ö)
    room = request.args.get("room", "general")
    messages = (
        db.query(Message)
        .filter(Message.room == room)
        .order_by(Message.sent_at.desc())
        .limit(50)
        .all()
    )
    db.close()

    return jsonify([
        {
            "id": m.id,
            "sender": m.sender,
            "content": m.content,
            "room": m.room,
            "sent_at": m.sent_at
        } for m in reversed(messages)
    ])


# ===============================
# ü§ñ 2. Bot Logic (reply generator)
# ===============================
def generate_bot_reply(text: str) -> str:
    t = (text or "").lower()
    if any(k in t for k in ["–≥—ç—Ä—ç—ç", "contract", "–≥—ç—Ä—ç—ç–≥"]):
        return "üìú –ì—ç—Ä—ç—ç–Ω–∏–π –∑–∞–≥–≤–∞—Ä, –∑”©–≤–ª”©–≥”©”© –∞–≤–∞—Ö –±–æ–ª LegalTechHub-–∏–π–Ω '–ì—ç—Ä—ç—ç' —Ö—ç—Å–≥–∏–π–≥ –∞—à–∏–≥–ª–∞–Ω–∞ —É—É."
    if any(k in t for k in ["—Ç–∞—Ç–≤–∞—Ä", "tax"]):
        return "üí∞ –¢–∞—Ç–≤–∞—Ä—ã–Ω –∑”©–≤–ª”©–≥”©”©–≥ '–û.–ì–∞–Ω–∑–æ—Ä–∏–≥' —Ö—É—É–ª—å—á–∞–∞—Å –∞–≤–∞—Ö –±–æ–ª–æ–º–∂—Ç–æ–π."
    if any(k in t for k in ["—ç—Ä“Ø“Ø", "criminal", "—ç—Ä“Ø“Ø–≥–∏–π–Ω"]):
        return "‚öñÔ∏è –≠—Ä“Ø“Ø–≥–∏–π–Ω —ç—Ä—Ö –∑“Ø–π–Ω –∞—Å—É—É–¥–ª–∞–∞—Ä '–ë.–≠–Ω—Ö–∂–∏–Ω' —Ö—É—É–ª—å—á —Ç—É—Å–∞–ª–Ω–∞."
    if any(k in t for k in ["–∫–æ–º–ø–∞–Ω–∏", "company"]):
        return "üè¢ –ö–æ–º–ø–∞–Ω–∏–π–Ω —ç—Ä—Ö –∑“Ø–π–Ω —Ç–∞–ª–∞–∞—Ä '–î.–ê—Ä–∏—É–Ω–±–æ–ª–¥' —Ö—É—É–ª—å—á —Ç—É—Å–∞–ª–Ω–∞."
    if any(k in t for k in ["–æ—é—É–Ω—ã ”©–º—á", "patent", "trademark"]):
        return "üß† –û—é—É–Ω—ã ”©–º—á–∏–π–Ω –∞—Å—É—É–¥–ª–∞–∞—Ä '–¶.–£—Ä–∞–Ω—á–∏–º—ç–≥' —Ö—É—É–ª—å—á—Ç–∞–π —Ö–æ–ª–±–æ–≥–¥–æ–Ω–æ —É—É."
    if any(k in t for k in ["–±–∞—è—Ä–ª–∞–ª–∞–∞", "thanks", "thank you"]):
        return "ü§ù –¢–∞–Ω–¥ –±–∞—è—Ä–ª–∞–ª–∞–∞. LegalTechHub —Ç–∞–Ω–¥ —Ç—É—Å–ª–∞—Ö–∞–¥ –±—ç–ª—ç–Ω!"
    if any(k in t for k in ["—Å–∞–π–Ω –±–∞–π–Ω–∞ —É—É", "hello", "hi"]):
        return "üëã –°–∞–π–Ω –±–∞–π–Ω–∞ —É—É! –Ø–º–∞—Ä —Ç”©—Ä–ª–∏–π–Ω —Ö—É—É–ª–∏–π–Ω —Ç—É—Å–ª–∞–º–∂ —Ö—ç—Ä—ç–≥—Ç—ç–π –≤—ç?"
    return "üí¨ –¢–∞–Ω—ã –∞—Å—É—É–ª—Ç—ã–≥ —Ö“Ø–ª—ç—ç–Ω –∞–≤–ª–∞–∞. –ú–∞–Ω–∞–π LegalTechHub —Ç–∞–Ω–¥ —Ç—É—Å–ª–∞—Ö –±–æ–ª–Ω–æ."


# ===============================
# üìù 3. Notes API (—Ö—É—É–ª—å—á–∏–π–Ω —Ç—ç–º–¥—ç–≥–ª—ç–ª)
# ===============================
@app.route("/api/notes", methods=["GET"])
def get_notes():
    db = SessionLocal()
    rows = db.execute(text(
        "SELECT id, title, content, created_at FROM notes_note ORDER BY id DESC;"
    )).fetchall()
    db.close()
    return jsonify([{
        "id": r.id,
        "title": r.title,
        "content": r.content,
        "created_at": r.created_at.isoformat() if r.created_at else None
    } for r in rows])


@app.route("/api/notes/new", methods=["POST"])
def add_note():
    data = request.get_json() or {}
    title = (data.get("title") or "").strip()
    content = (data.get("content") or "").strip()

    if not title or not content:
        return jsonify({"error": "title/content required"}), 400

    db = SessionLocal()
    db.execute(text(
        "INSERT INTO notes_note (title, content) VALUES (:t, :c)"
    ), {"t": title, "c": content})
    db.commit()
    db.close()
    return jsonify({"message": "üìù Note added successfully"})


# ===============================
# üöÄ App run
# ===============================
if __name__ == "__main__":
    app.run(debug=True, port=5001)